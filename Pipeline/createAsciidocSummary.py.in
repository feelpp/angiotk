#!/usr/bin/env python                                                                                                                                                                                                                         

import argparse
import ConfigParser
import os
import shutil
import sys
import time
# to read results database (json file)
import json
from collections import OrderedDict
import string
import errno
# check if file exists
def sanityCheckFile(filepath, msg=""):
    if( not os.path.exists(filepath) ):
        if(msg != ""):
            print msg + "\nAborting ..."
        else:
            print "The file " + filepath + " was not found\nAborting ..."
        exit(1)

# make a directory (don't fail if it exists)                                                                                                                                                                                                 
def makedir(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def sanityCheckFile(filepath, msg=""):
    if( not os.path.exists(filepath) ):
        if(msg != ""):
            print msg + "\nAborting ..."
        else:
            print "The file " + filepath + " was not found\nAborting ..."
        exit(1)

def main():
    
    # parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', required=True, help='Path to the original database in json format')
    parser.add_argument('-o', required=False, default="", help='Desired output asciidoc file')
    args = parser.parse_args()
    # prepare i/o paths and filenames
    jsonFile = args.i # usually $RESULTS/resultsDataBase/summary.json
    sanityCheckFile(jsonFile) # check file existence
    baseName, ext = os.path.splitext(os.path.basename(args.i)) # separate $RESULTS/resultsDataBase  and summary.json
    if args.o=="":
        fileNoExt, ext = os.path.splitext(args.i)
        asciidocFile = fileNoExt + '.adoc' # usually -> #RESULTS/resultsDataBase/summary.adoc 
        print 'createAsciidocDB.py: No output specified, using input file name with .adoc extention: ' + asciidocFile
    else:
        makedir(args.o) # create output directory if needed
        asciidocFile = args.o # usually -> #RESULTS/resultsDataBase/summary.json

    # ------------ Results Database initialization -------------                                                                                                                                                                             
    # initialize database by reading existing file or creating one if needed.
    summaryDict = OrderedDict()
    try:
        dbFile = open(jsonFile,'r')
        summaryDict = json.load(dbFile, object_pairs_hook=OrderedDict)
        dbFile.close()
    except Exception, e:
        print 'createAsciidocDB.py: ', e
    
    adocFile = open(asciidocFile, 'w')

    # write Title
    adocFile.write("#AngioTK Pipeline Runs\n\n")
    # write text before table
    adocFile.write("##Runs table:\n\n")
    # write table title
    adocFile.write(".Runs table\n")
    # write columns titles (i.e. the top row)
    adocFile.write("[style=\"verse,asciidoc\",options=\"header,footer\"]\n")
    adocFile.write("|===\n")
    adocFile.write("|Run ID |Details")
    adocFile.write("\n\n")
    # write other rows
    for runID, details in summaryDict['runs'].items():
        adocFile.write('|' + runID + ' |') # left cell
        for name, data in details.items(): # right cell
            if name=='link':
                adocFile.write('link:' + str(data) + '[link]\n')
            else:
                adocFile.write(str(name) + ': ' + str(data) + ' +\n')
        adocFile.write("\n")
    adocFile.write("|===\n")
    
    adocFile.close()

# Only do this, if we do not import as a module                                                                                                                                                                                               
if __name__ == "__main__":
    main()
